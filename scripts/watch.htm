<html
    window-width="500dip"
    window-height="200dip"
>
<head>
<title>Sandbox watch</title>
<style>

@import url(../node_modules/sciter-logger/src/logger.css);

@set std-toggle < std-toggle {
  :root::marker {
    background: color(button-face);
  }

  :root:checked::marker {
    background: blue;
  }
}

body {
    margin: 0;
    border-spacing: 0.5em;
}

div.hbox {
    flow: horizontal;
    vertical-align: middle;
    border-spacing: 1em;
}

div.hbox:first-child {
    margin-left: 1em;
}

plaintext#logger:expanded {
    display: block;
}

plaintext#logger:collapsed {
    display: none;
}

</style>
<script type="module">

import * as Sys from "@sys";
import Logger from "../node_modules/sciter-logger/src/logger.js";
import Utils from "../node_modules/sciter-utils/src/utils.js";

// capture unhandled exceptions
Logger.capture();

// initialize logger
Logger.init();

// attach logger to console
Logger.attach();

let entry;
let watch;

document.on("ready", () => {
    // redirect logger output to plaintext
    Logger.plaintext(document.$("plaintext#logger"));

    // log sciter version
    console.log(Utils.sciterInfo());

    // close window on escape key press
    Utils.closeWindowOnEscape(Window.this);

    // bring window to front and set input focus
    if (!Window.this.activate(true))
        console.error("Activate window - FAILED");

    const argv = Window.this.scapp?.argv;

    if (!argv)
        throw new Error("missing command line arguments");

    entry = Sys.cwd() + Utils.getSeparator() + argv[argv.length - 1].replace(/\//g, Utils.getSeparator());

    console.debug(`Entry ${entry}`);

    // load content
    document.$("button#reload").click();

    // watch content
    document.$("toggle#autoReload").click();
});

let isReloading = false;
let window;

function reload(_event, _type) {
    if (isReloading)
        return;

    //console.debug(event, type);

    isReloading = true;

    let x, y;

    const restart = Boolean(window);

    if (restart) {
        // get window origin
        [x, y] = Utils.windowRect(window, true);
    }

    if (window) {
        console.log("Detected changes, reloading...");

        // close open window
        window.close();
        window = undefined;
    }

    /*
    // potentially test code before showing it
    let module = Sciter.import(entry);

    console.debug("module", typeof module);
    return;
    */

    // show window
    window = new Window({
        //type: Window.FRAME_WINDOW,
        parent: Window.this,
        url: entry,
        // only center window on first start
        alignment: restart ? undefined : 5,
        x,
        y,
        //screen: 0,
    });

    // prevent too fast reload
    setTimeout(() => {
        isReloading = false;

        // move watch window next to main window
        const [left, top] = Utils.windowRect(window, true);
        const [, height] = Utils.windowDimensions(Window.this, true);

        Window.this.move(left, top - height);
    }, 300);
}

document.on("click", "button#reload", reload);

document.on("click", "toggle#logger", function() {
    const logger = document.$("plaintext#logger");
    if (logger.state.collapsed) {
        logger.state.collapsed = false;
        logger.state.expanded = true;
    }
    else {
        logger.state.collapsed = true;
        logger.state.expanded = false;
    }
});

document.on("close", function() {
    // stop to watch dir
    console.debug("Stop watch");

    if (watch)
        watch.close();
});

document.on("click", "toggle#autoReload", function(event, element) {
    if (element.checked) {
        const [dir] = Sys.fs.splitpath(entry);

        console.debug(`Watch dir ${dir}`);

        // watch source dir
        watch = Sys.fs.watch(dir, reload);
    }
    else {
        if (watch) {
            // stop to watch dir
            console.debug("Stop watch");
            watch.close();
        }

        watch = undefined;
    }
});

</script>
</head>
<body>
    <div .hbox>
        <button #reload>Reload</button>
        <toggle #autoReload checked>
            <caption>watch</caption>
        </toggle>
        <toggle #logger checked hidden>
            <caption>log</caption>
        </toggle>
    </div>
    <plaintext #logger readonly />
</body>
</html>
